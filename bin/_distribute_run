#!/usr/bin/env python
# DON'T CALL THIS COMMAND MANUALLY! - intended to be called by '_distribute_receiver'
# Runs a command with input piped through stdin
#
# Usage: _distribute_run [-e notificationEmail] [-c emailSenderConfig] [-n name] runID initiator jobNum maxJob remoteCommand [remoteArgs]
#
#    runID: unique ID for this run (usually the date and time)
#    initiator: user and host that started this run
#    jobNum: numeric ID for this remote job
#    maxJob: maximum job number; for pretty printing
#    notificationEmail: email address to notify on completion; may be blank
#    emailSenderConfig: config file for the email program; must be present if notificationEmail is present
#    name: human-readable name for this run, for use in emails
#    remoteCommand: should read an input file through stdin
#

import argparse
import distributor.distribute as d
import os.path
import sys

parser = argparse.ArgumentParser(description="DON'T CALL THIS COMMAND MANUALLY! - intended to be called by '_distribute_receiver'. Runs a command with input piped through stdin.")

parser.add_argument("runID", help="unique ID for this run (usually the date and time)")
parser.add_argument("initiator", help="user and host that started this run")
parser.add_argument("jobNum", type=int, help="numeric ID for this remote job")
parser.add_argument("maxJob", type=int, help="maximum job number; for pretty printing")
parser.add_argument("remoteCommand", help="should read an input file through stdin")
parser.add_argument("remoteArgs", nargs=argparse.REMAINDER, default=[], help="arguments passed to the remote command")

parser.add_argument("-e", "--email", default="", help="email address to notify of completion")
parser.add_argument("-c", "--senderConfig", default="", help="SSMTP config file on the remote hosts used to send emails")
parser.add_argument("-n", "--name", default="", help="human-readable name for this run, for use in emails")


args = parser.parse_args()

runID = args.runID
initiator = args.initiator
jobNum = args.jobNum
maxJob = args.maxJob
remoteCommand = args.remoteCommand
remoteArgs = args.remoteArgs
notificationEmail = args.email
emailSenderConfig = args.senderConfig
name = args.name

if not name:
    name = remoteCommand


def logStatus(eventTime, jobNum, maxJob, cmd, me, inputFileName, event, *files):
    d.log("%s    job %s (max %d)    %s    %s    on %s    input: %s" % (eventTime, d.prettyJob(jobNum, maxJob), maxJob, event, remoteCommand, me, os.path.basename(inputFileName)), *files)


rundir = d.RunDir(initiator, runID)
inputFileName = rundir.partialInputFile(jobNum, maxJob)

rundir.createRunningFile(jobNum, maxJob)

startTime = d.nowPretty()
startTimestamp = d.nowStamp()
me = d.me()

with rundir.openCommandReport(jobNum, maxJob) as f:
    d.log("Job No.: %d (max %d)" % (jobNum, maxJob), f)
    d.log("Running on: %s" % me, f)
    d.log("Input file: %s (%d item(s))" % (os.path.basename(inputFileName), d.linecount(inputFileName)), f)
    d.log("", f)
    d.log("Command: %s" % remoteCommand, f)
    d.log("", f)
    d.log("Args: %s" % str(remoteArgs), f)
    d.log("", f)
    d.log("Start time: %s (%d)" % (startTime, startTimestamp), f)


with rundir.openGlobalRunnerLog() as globalLog, rundir.openLocalRunnerLog() as localLog:
    logStatus(startTime, jobNum, maxJob, remoteCommand, me, inputFileName, "started  ", globalLog, localLog)

d.setRunnerEnvVars(initiator, runID)

success = True
with open(inputFileName) as inputFile, rundir.openCommandLog(jobNum, maxJob) as log:
    try:
        d.runCommand([remoteCommand] + remoteArgs, infile=inputFile, outfile=log, logging=False)
    except:
        success = False


endTime = d.nowPretty()
endTimestamp = d.nowStamp()
runtime = endTimestamp - startTimestamp

with rundir.openCommandReport(jobNum, maxJob) as report, rundir.openGlobalRunnerLog() as globalLog, rundir.openLocalRunnerLog() as localLog:
    d.log("End time: %s (%d)" % (endTime, endTimestamp), report)
    d.log("Total time: %d s" % runtime, report)
    d.log("", report)

    if rundir.aborted():
        d.log("Status: aborted", report)
        logStatus(endTime, jobNum, maxJob, remoteCommand, me, inputFileName, "ABORTED  ", globalLog, localLog)
    elif success:
        d.log("Status: success", report)
        logStatus(endTime, jobNum, maxJob, remoteCommand, me, inputFileName, "completed", globalLog, localLog)
    else:
        d.log("Status: failure", report)
        logStatus(endTime, jobNum, maxJob, remoteCommand, me, inputFileName, "FAILED   ", globalLog, localLog)

rundir.deleteRunningFile(jobNum, maxJob)


if notificationEmail:
    status = "finished"
    if rundir.aborted():
        status = "was ABORTED"
    elif not success:
        status = "FAILED"

    subject = "%s %s on %s" % (name, status, me)
    body = "%s %s on %s (job %s, max %d) at %s (took %d s)" % (name, status, me, d.prettyJob(jobNum, maxJob), maxJob, endTime, runtime)

    with rundir.openCommandReport(jobNum, maxJob) as report:
        d.log("Sending notification email...", report)
        try:
            d.sendEmail("distribute_run", notificationEmail, subject, body, emailSenderConfig, report)
        except Exception as e:
            d.log("Failed to send notification email: " + str(e), report)
        else:
            d.log("Sent notification email", report)
