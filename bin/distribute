#!/usr/bin/env python
# Command line interface to the distributor.distribute module

import argparse
import distributor.arghelper as h
import distributor.distribute as d
import shlex
import sys

parser = argparse.ArgumentParser(description="Run a command on multiple remote machines")

parser.add_argument("hostsFile", type=h.existingFile, help="Hosts to run the command on, one host per line")
parser.add_argument("inputFile", type=h.existingFile, help="Input to be split and passed to the remote commands via stdin")
parser.add_argument("remoteCommand", help="The command to run on the remote hosts")
parser.add_argument("remoteArgs", nargs=argparse.REMAINDER, default=[], help="Arguments passed to the remote command")

parser.add_argument("-e", "--email", help="Email address to notify of completion")
parser.add_argument("-c", "--senderConfig", help="SSMTP config file on the remote hosts used to send emails")
parser.add_argument("-n", "--name", help="Human-readable name for this run, for use in emails")
parser.add_argument("-g", "--gateway", help="Machine for one-off setup actions")
parser.add_argument("--gatewaySsh", help="Command to log into the gateway")
parser.add_argument("--gatewayScp", help="Command to copy files to the gateway")
parser.add_argument("--gatewayUser", help="User to log into the gateway as")
parser.add_argument("--hostsSsh", help="Command to log into the remote hosts")
parser.add_argument("--hostsScp", help="Command to copy files to the remote hosts")
parser.add_argument("--hostsUser", help="User to log into the remote hosts as")
parser.add_argument("--gatewaySetup", action="append", default=[], help="Setup command to run on the gateway; may be specified multiple times")
parser.add_argument("--gatewayCpFile", action="append", nargs=2, default=[], metavar=("SRC", "DST"), help="File to copy to the gateway; may be specified multiple times")
parser.add_argument("--hostsSetup", action="append", default=[], help="Setup command to run on all the hosts; may be specified multiple times")
parser.add_argument("--hostsCpFile", action="append", nargs=2, default=[], metavar=("SRC", "DST"), help="File to copy to all the hosts; may be specified multiple times")

args = parser.parse_args()

hosts = []
with open(args.hostsFile) as f:
    for line in f:
        if line.strip():
            hosts.append(line.strip())

kwargs = {}

def argIfExists(arg, key):
    if arg:
        kwargs[key] = arg

argIfExists(args.email, "notificationEmail")
argIfExists(args.senderConfig, "emailSenderConfig")
argIfExists(args.name, "name")
argIfExists(args.gateway, "gateway")
argIfExists(args.gatewaySsh, "gatewaySshCommand")
argIfExists(args.gatewayScp, "gatewayScpCommand")
argIfExists(args.gatewayUser, "gatewaySshUser")
argIfExists(args.hostsSsh, "hostsSshCommand")
argIfExists(args.hostsScp, "hostsScpCommand")
argIfExists(args.hostsUser, "hostsSshUser")

if args.gatewaySetup:
    kwargs["gatewaySetup"] = map(shlex.split, args.gatewaySetup)

if args.hostsSetup:
    kwargs["hostsSetup"] = map(shlex.split, args.hostsSetup)

if args.gatewayCpFile:
    kwargs["gatewayFiles"] = map(lambda (x, y): (x, y), args.gatewayCpFile) # Convert lists to tuples

if args.hostsCpFile:
    kwargs["hostsFiles"] = map(lambda (x, y): (x, y), args.hostsCpFile) # Convert lists to tuples


try:
    d.distribute(hosts,
                 args.inputFile,
                 args.remoteCommand,
                 remoteArgs=args.remoteArgs,
                 **kwargs)
                 
except d.DistributeException as e:
    print str(e)
    sys.exit(1)
